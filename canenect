import cv2
import time
import pyttsx3
import numpy as np
from picamera2 import Picamera2
from ultralytics import YOLO

# 1. YOLO 모델 로드
model = YOLO("yolov8n.pt")

# 2. TTS 엔진 초기화
engine = pyttsx3.init()
engine.setProperty("rate", 150)  # 음성 속도 조절

# 3. Picamera2 설정
picam2 = Picamera2()
picam2.preview_configuration.main.size = (320, 240)
picam2.preview_configuration.main.format = "RGB888"
picam2.preview_configuration.align()
picam2.configure("preview")
picam2.start()

# 4. 감지 정보 초기화
frame_count = 0
last_alert_time = 0
detected_objects = {}  # 각 객체별 마지막 감지 시간 저장

while True:
    frame = picam2.capture_array()  # 프레임 캡처
    frame_count += 1

    # 10프레임마다 감지 수행 (속도 조절)
    if frame_count % 10 == 0:
        results = model(frame, verbose=False)  # YOLO 감지
        current_objects = {}

        # 감지된 객체 저장
        for box in results[0].boxes:
            class_id = int(box.cls)
            object_name = model.names[class_id]
            current_objects[object_name] = time.time()

        # 노란색 물체 감지 (Companion 감지)
        hsv_frame = cv2.cvtColor(frame, cv2.COLOR_RGB2HSV)
        lower_yellow = np.array([20, 100, 100])  # 노란색 범위 (HSV)
        upper_yellow = np.array([30, 255, 255])
        yellow_mask = cv2.inRange(hsv_frame, lower_yellow, upper_yellow)
        yellow_detected = cv2.countNonZero(yellow_mask) > 500  # 픽셀 개수 기준

        # 감지된 객체 필터링 (최소 3초 간격 유지)
        alert_messages = []
        current_time = time.time()

        for obj, last_time in current_objects.items():
            if obj not in detected_objects or (current_time - detected_objects[obj]) > 3:
                alert_messages.append(f"Detected {obj}")
                detected_objects[obj] = current_time

        # Companion 감지 처리 (최소 3초 간격 유지)
        if yellow_detected and ("Companion" not in detected_objects or (current_time - detected_objects["Companion"]) > 3):
            alert_messages.append("Companion detected")
            detected_objects["Companion"] = current_time

        # 음성 출력 (최소 3초 간격 유지)
        if alert_messages and (current_time - last_alert_time) > 3:
            alert_text = ". ".join(alert_messages)
            print(alert_text)
            engine.say(alert_text)
            engine.runAndWait()
            last_alert_time = current_time

    # 0.1초 대기 (속도 조절)
    time.sleep(0.1)
